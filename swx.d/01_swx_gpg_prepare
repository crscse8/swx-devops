swx_gpg_prepare ()
{
  if [ -d "${devops}/secrets/gnupg" ] ; then
    export GNUPGHOME="${devops}/secrets/gnupg"
  else
    if [ -d "$HOME/.gnupg" ]; then
      export GNUPGHOME="$HOME/.gnupg"
    fi
  fi
  chmod go-rwx "$GNUPGHOME"

  if [ ! -d "$GNUPGHOME" ] ; then
    echo 'You may need to first generate a gpg key:'
    echo '    gpg --gen-key'
  fi

  if [ -d /usr/local/opt/gpg-agent ]; then
    export PATH="/usr/local/opt/gpg-agent/bin:$PATH"
    export PATH="/usr/local/opt/gpg-agent/libexec:$PATH"
  fi

  if [ -f /usr/lib/gnupg2/gpg-preset-passphrase ]; then
    export PATH=/usr/lib/gnupg2:$PATH
  fi

  if [ -f "$GNUPGHOME/.gpg-agent-info" ]; then
    . "$GNUPGHOME/.gpg-agent-info"
    export GPG_AGENT_INFO SSH_AUTH_SOCK SSH_AGENT_PID
  fi

  # If the GPG_AGENT_INFO points to a unix domain socket that doesn't exist, unset it
  if [ -n "$GPG_AGENT_INFO" -a ! -e "$(echo $GPG_AGENT_INFO | cut -d: -f1)" ]; then
    if [ -f "$GNUPGHOME/.gpg-agent-info" ]; then
      rm -f "$GNUPGHOME/.gpg-agent-info"
    fi
    unset GPG_AGENT_INFO gpg_agent_info
  fi

  # Use pinentry-mac if it is available
  if ! grep pinentry-program "$GNUPGHOME/gpg-agent.conf" > /dev/null ; then
    if which pinentry-mac > /dev/null ; then
      echo "pinentry-program /usr/local/bin/pinentry-mac" >> "$GNUPGHOME/gpg-agent.conf"
    fi
    if [ -f /usr/bin/pinentry-curses ]; then
      echo "pinentry-program /usr/bin/pinentry-curses" >> "$GNUPGHOME/gpg-agent.conf"
    fi
  fi

  if [ -z "${GPG_AGENT_INFO}" ]; then
    if which gpg-agent > /dev/null ; then
      GPG_TTY=$(tty)
      export GPG_TTY
  
      eval $(gpg-agent --daemon --enable-ssh-support --write-env-file "$GNUPGHOME/.gpg-agent-info" --allow-preset-passphrase)
    fi
  fi

  if [ -n "${GPG_AGENT_INFO}" ]; then
    export gpg_agent_info="${GPG_AGENT_INFO}"
  fi

  #if gpg-agent --use-standard-socket-p ; then
  #  echo "WARNING: Your gpg build/version/configuration is not compatible with trousseau: $(gpg --version | head -1)"
  #  echo "If gpg is running with --use-standard-socket, GPG_AGENT_INFO will not be set, which trousseau needs to operate correctly"
  #fi

  if [ -z "$KEYGRIP" ]; then
    KEYGRIP=$(gpg --fingerprint --fingerprint | grep fingerprint | head -2 | tail -1 | cut -d= -f2 | sed -e 's/ //g')
  fi
  if [ -z "$TROUSSEAU_MASTER_GPG_ID" ]; then
    export TROUSSEAU_MASTER_GPG_ID=$KEYGRIP
  fi
  if [ -d /swx -a -f /swx/secrets/ssh/sofwerx ]; then
    eval $(ssh-agent)
    ssh-add /swx/secrets/ssh/sofwerx
  fi
}

swx_gpg_prepare

# This fixes my ssh-add hang problem when using gpg-agent instead of sshagent
if echo "$SSH_AUTH_SOCK" | grep gpg > /dev/null ; then
  unalias ssh-add 2>/dev/null 
  alias ssh-add="echo UPDATESTARTUPTTY | gpg-connect-agent ; ssh-add"
fi

