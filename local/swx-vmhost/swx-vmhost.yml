version: "2.1"

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

networks: 
  default:
    driver: bridge

volumes:
  traefik-ssl:
    driver: local
  neo4j-data:
    driver: local
  kanboard_data:
    driver: local
  kanboard_plugins:
    driver: local
  kanboard_ssl:
    driver: local
  minio:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/import/minio/jupyterhub/osm'
  osm-postgis-data:
    driver: local
  osm-import_done:
    driver: local
  osm-import_queue:
    driver: local
  osm-cache:
    driver: local
  osm-settings:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/import/minio/jupyterhub/osm'
  qgis-logs:
    driver: local
  geoserver-data:
    driver: local
  django-geopackage-server_data:
    driver: local
  django-geopackage-server-media:
    driver: local

services:

  traefik:
    extends:
      file: docker-traefik/docker-compose.yml
      service: traefik
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - default
    environment:
      REST_PORT: "7080"
      HTTP_PORT: "80"
      HTTPS_PORT: "443"
      EMAIL: "devops@sofwerx.org"
      DNS_DOMAIN: ${DNS_DOMAIN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_HOSTED_ZONE_ID: ${AWS_HOSTED_ZONE_ID}
      AWS_REGION: ${AWS_REGION}
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=7080"
      - "traefik.frontend.rule=Host:traefik.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  glo:
    extends:
      file: glo/docker-compose.yml
      service: glo
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=glo"
      - "traefik.port=4200"
      - "traefik.frontend.rule=Host:glo.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=false"
      - "traefik.frontend.entryPoints=http,https"

  glo-services:
    extends:
      file: glo-services/docker-compose.yml
      service: glo-services
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=glo-services"
      - "traefik.port=4200"
      - "traefik.frontend.rule=Host:glo-services.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=false"
      - "traefik.frontend.entryPoints=http,https"

  glo-demo:
    extends:
      file: glo-demo/docker-compose.yml
      service: glo-demo
    image: sofwerx/glo-demo
    container_name: glo-demo
    hostname: glo-demo
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=glo-demo"
      - "traefik.port=4200"
      - "traefik.frontend.rule=Host:glo-demo.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=false"
      - "traefik.frontend.entryPoints=http,https"

  neo4j:
    extends:
      file: docker-neo4j/docker-compose.yml
      service: neo4j
    image: neo4j:latest
    restart: always
    networks: 
      - default
    ports:
      - 7687:7687
      - 7474:7474
      - 7473:7473
    logging: *default-logging
    volumes:
      - traefik-ssl:/ssl
      - neo4j-data:/var/lib/neo4j
    labels:
      - "traefik.enable=true"
      - "traefik.backend=neo4j"
      - "traefik.port=7474"
      - "traefik.frontend.rule=Host:neo4j.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  cesium:
    extends:
      file: docker-cesium/docker-compose.yml
      service: cesium
    image: sofwerx/cesium
    restart: always
    logging: *default-logging
    networks:
      - default
    volumes:
      - traefik-ssl:/ssl
    labels:
      - "traefik.enable=true"
      - "traefik.backend=cesium"
      - "traefik.port=8088"
      - "traefik.frontend.rule=Host:cesium.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  kanboard:
    image: kanboard/kanboard:latest
    container_name: kanboard
    hostname: kanboard
    volumes:
     - kanboard_data:/var/www/app/data
     - kanboard_plugins:/var/www/app/plugins
     - kanboard_ssl:/etc/nginx/ssl
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=kanboard"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:kanboard.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  underground:
    extends:
      file: underground/docker-compose.yml
      service: underground
    image: sofwerx/underground
    container_name: underground
    hostname: underground
    restart: always
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=underground"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:underground.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=false"
      - "traefik.frontend.entryPoints=http,https"

  pocket-node:
    extends:
      file: pocket-node/docker-compose.yml
      service: pocket-node
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=pocket-node"
      - "traefik.port=${POCKET_NODE_SERVER_PORT}"
      - "traefik.frontend.rule=Host:pocket-node.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=false"
      - "traefik.frontend.entryPoints=http,https"

  opensphere:
    extends:
      file: docker-opensphere/docker-compose.yml
      service: opensphere
    image: sofwerx/opensphere
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=opensphere"
      - "traefik.port=8282"
      - "traefik.frontend.rule=Host:opensphere.${DNS_DOMAIN}"
#      - "traefik.frontend.rule=Host:opensphere.${DNS_DOMAIN};AddPrefix:/opensphere/dist/opensphere"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  osm-postgis:
    # About the postgresql version, it should match in the dockerfile of docker-imposm3
    image: kartoza/postgis:9.6-2.4
    hostname: osm-postgis
    container_name: osm-postgis
    restart: always
    environment:
      - POSTGRES_USER=${OSM_POSTGRES_USER}
      - POSTGRES_PASS=${OSM_POSTGRES_PASS}
      - POSTGRES_DBNAME=${OSM_POSTGRES_DBNAME}
      # Uncomment to expose the postgis database on the network
      # - ALLOW_IP_RANGE= 0.0.0.0/0
    logging: *default-logging
    volumes:
      - 'osm-postgis-data:/var/lib/postgresql'
    # Uncomment to use the postgis database from outside the docker network
    ports:
      - "35432:5432"
    healthcheck:
        test: "exit 0"
    labels:
      - "traefik.enable=false"

  osm-import:
    build: docker-osm/docker-imposm3
    image: sofwerx/docker-osm:imposm-latest
    container_name: osm-import
    hostname: osm-import
    logging: *default-logging
    volumes:
      # These are sharable to other containers
      - osm-import_done:/home/import_done
      - osm-import_queue:/home/import_queue
      - osm-cache:/home/cache
      - osm-settings:/home/settings
    depends_on:
        osm-postgis:
          condition: service_healthy
    environment:
      - POSTGRES_USER=${OSM_POSTGRES_USER}
      - POSTGRES_PASS=${OSM_POSTGRES_PASS}
      - POSTGRES_DBNAME=${OSM_POSTGRES_DBNAME}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=osm-postgis
      # seconds between 2 executions of the script
      # if 0, then no update will be done, only the first initial import from the PBF
      - TIME=120
      # folder for settings (with *.json and *.sql)
      - SETTINGS=settings
      # folder for caching
      - CACHE=cache
      # folder for diff which has been imported
      - IMPORT_DONE=import_done
      # folder for diff which hasn't been imported yet
      - IMPORT_QUEUE=import_queue
      # it can be 3857
      - SRID=4326
      # see http://imposm.org/docs/imposm3/latest/tutorial.html#optimize
      - OPTIMIZE=false
      # see http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_PRODUCTION=public
      # http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_IMPORT=import
      # http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_BACKUP=backup
      # Install some styles if you are using the default mapping. It can be 'yes' or 'no'
      - QGIS_STYLE=yes
      # Use clip in the database
      - CLIP=no
    labels:
      - "traefik.enable=false"

  osm-update:
    build: docker-osm/docker-osmupdate
    image: sofwerx/docker-osm:osmupdate-latest
    container_name: osm-update
    hostname: osm-update
    volumes:
      # These are sharable to other containers
      - osm-import_done:/home/import_done
      - osm-import_queue:/home/import_queue
      - osm-cache:/home/cache
      - osm-settings:/home/settings
    depends_on:
      osm-postgis:
        condition: service_healthy
    restart: always
    environment:
      # These are all currently the defaults but listed here for your
      # convenience if you want to change them
      # the maximum time range to assemble a cumulated changefile.
      - MAX_DAYS=100
      # osmupdate uses a combination of minutely, hourly and daily changefiles. This value can be minute, hour, day or sporadic.
      - DIFF=sporadic
      # argument to determine the maximum number of parallely processed changefiles.
      - MAX_MERGE=7
      # define level for gzip compression. values between 1 (low compression but fast) and 9 (high compression but slow)
      - COMPRESSION_LEVEL=1
      # change the URL to use a custom URL to fetch regional file updates.
      - BASE_URL=http://planet.openstreetmap.org/replication/
      # folder for diff which hasn't been imported yet
      - IMPORT_QUEUE=import_queue
      # folder for diff which has been imported
      - IMPORT_DONE=import_done
      # seconds between 2 executions of the script
      # if 0, then no update will be done, only the first initial import from the PBF
      - TIME=120
    labels:
      - "traefik.enable=false"

  qgis:
    build: docker-osm/qgis/
    image: sofwerx/qgis-server:3.0
    hostname: qgis
    container_name: qgis
    logging: *default-logging
    volumes:
      - qgis-logs:/var/log/apache2
      - osm-settings:/web/settings
    links:
      - osm-postgis:db
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.backend=qgis"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:qgis.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  geoserver:
    build: docker-geoserver/
    image: sofwerx/geoserver
    hostname: geoserver
    container_name: geoserver
    restart: always
    environment:
      ADMIN_PASSWD: ${GEOSERVER_ADMIN_PASSWORD}
    networks:
      - default
    links:
      - osm-postgis:postgis
    volumes:
      - geoserver-data:/opt/geoserver/data_dir
      - minio:/opt/geoserver/minio
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=geoserver"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:geoserver.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  mapserver:
    hostname: mapserver
    container_name: mapserver
    build:
      context: mapserver-docker/
      args:
        GDAL_VERSION: 2.3.1
        MAPSERVER_VERSION: 7.2.0
    image: sofwerx/mapserver:7.2.0
    restart: always
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=mapserver"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:mapserver.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  django-geopackage-server:
    extends:
      file: DjangoGeoPackageServer/docker-compose.yml
      service: django-geopackage-server
    image: sofwerx/django-geopackage-server
    container_name: django-geopackage-server
    hostname: django-geopackage-server
    restart: always
    logging: *default-logging
    volumes:
      - django-geopackage-server_data:/data
      - django-geopackage-server-media:/app/GPKGServer/media
    environment:
      SQLITE_DB_PATH: /data/db.sqlite3
      DJANGO_HOSTNAME: django-geopackage-server.${DNS_DOMAIN}
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=django-geopackage-server"
      - "traefik.port=7999"
      - "traefik.frontend.rule=Host:django-geopackage-server.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
  rml:
    build:
      context: dockerRML/
      dockerfile: Dockerfile.GPU
      args:
        ARCH: ${ARCH}
    image: sofwerx/rml:${ARCH}-GPU

  osh-core:
    extends:
      file: docker-osh/docker-compose.yml
      service: osh-core
    restart: always
    networks:
      - default
    ports:
      - 8181:8181
    labels:
      - "traefik.enable=true"
      - "traefik.backend=osh-core"
      - "traefik.port=8181"
      - "traefik.frontend.rule=Host:osh.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  splunk:
    container_name: splunk
    hostname: splunk
    image: splunk/splunk:latest 
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_PASSWORD: ${SPLUNK_PASSWORD}
    ports:
      - 8000:8000/tcp
      - 4001/tcp
      - 8065/tcp
      - 8088-8089/tcp
      - 8191/tcp
      - 9887/tcp
      - 9997/tcp
    restart: always
    volumes:
      - /data/splunk:/opt/splunk/var
    networks:
      - default
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=splunk"
      - "traefik.port=8000"
      - "traefik.frontend.rule=Host:splunk.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"


