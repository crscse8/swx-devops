version: "2"

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

networks: 
  default:
    driver: bridge

volumes:
  traefik-ssl:
    driver: local
  postgres-data:
    driver: local
  guacamole-data:
    driver: local
  mongo-db:
    driver: local
  mongo-configdb:
    driver: local
  mage-data:
    driver: local
  geoserver-data:
    driver: local
  postgis-data:
    driver: local
  neo4j-data:
    driver: local
  structr-data:
    driver: local
  owncloud-data:
    driver: local
  owncloud-files:
    driver: local
  owncloud-mysql:
    driver: local
  owncloud-backup:
    driver: local
  owncloud-redis:
    driver: local
  3dcitydb-postgis-data:
    driver: local
  3dcitydb-web-map-data:
    driver: local
  django-geopackage-server_data:
    driver: local
  django-geopackage-server-media:
    driver: local

services:

  osgeo:
    extends:
      file: docker-osgeo/docker-compose.yml
      service: osgeo
    network_mode: host
    privileged: true
    volumes:
      - /:/chroot
    labels:
      - "traefik.enable=false"

  geoserver:
    extends:
      file: docker-geoserver/docker-compose.yml
      service: geoserver
    restart: always
    networks:
      - default
    volumes:
      - geoserver-data:/opt/geoserver/data_dir
      - /home/geo:/home/geo
    labels:
      - "traefik.enable=true"
      - "traefik.backend=geoserver"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:geoserver.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

#  geonode:
#    extends:
#      file: docker-geonode/docker-compose.yml
#      service: geonode
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=geoserver"
#      - "traefik.port=8000"
#      - "traefik.frontend.rule=Host:geonode.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"

  traefik:
    extends:
      file: docker-traefik/docker-compose.yml
      service: traefik
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - default
    environment:
      REST_PORT: "7080"
    logging: *default-logging
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=7080"
      - "traefik.frontend.rule=Host:traefik.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  postgis:
    extends:
      file: docker-postgis/9.5-2.4/docker-compose.yml
      service: postgis
    networks:
      - default
    volumes:
      - postgis-data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"

  pgadmin:
    extends:
      file: docker-postgis/9.5-2.4/docker-compose.yml
      service: pgadmin
    networks:
      - default
    volumes:
      - traefik-ssl:/ssl
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_SERVER_NAME: pgadmin.${DNS_DOMAIN}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=pgadmin"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:pgadmin.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  postgres:
    extends:
      file: docker-guacamole/docker-compose.yml
      service: postgres
    restart: always
    networks:
      - default
    volumes:
      - postgres-data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"

  guacd:
    extends:
      file: docker-guacamole/docker-compose.yml
      service: guacd
    restart: always
    networks:
      - default
    volumes:
      - traefik-ssl:/ssl
    labels:
      - "traefik.enable=false"

  guacamole:
    extends:
      file: docker-guacamole/docker-compose.yml
      service: guacamole
    restart: always
    networks:
      - default
    volumes:
      - guacamole-data:/data
      - traefik-ssl:/ssl
    labels:
      - "traefik.enable=true"
      - "traefik.backend=guacamole"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:guacamole.${DNS_DOMAIN};AddPrefix:/guacamole"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  mongo:
    extends:
      file: docker-mage-server/docker-compose.yml
      service: mongo
    image: mongo:3.6.2
    restart: always
    networks:
      - default
    volumes:
      - mongo-db:/data/db
      - mongo-configdb:/data/configdb
    labels:
      - "traefik.enable=false"

  mage:
    extends:
      file: docker-mage-server/docker-compose.yml
      service: mage
    restart: always
    networks:
      - default
    depends_on:
      - mongo
    volumes:
      - mage-data:/var/lib/mage
    labels:
      - "traefik.enable=true"
      - "traefik.backend=mage"
      - "traefik.port=4242"
      - "traefik.frontend.rule=Host:mage.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  mongoexpress:
    image: mongo-express
    container_name: mongoexpress
    hostname: mongoexpress
##    environment:
##      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
##      ME_CONFIG_BASICAUTH_USERNAME: manager
##      ME_CONFIG_BASICAUTH_PASSWORD: correcthorsebatterystaple
    networks:
      - default
    depends_on:
      - mongo
    links:
      - mongo
    labels:
      - "traefik.enable=true"
      - "traefik.backend=mongoexpress"
      - "traefik.port=8081"
      - "traefik.frontend.rule=Host:mongoexpress.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  opensphere:
    extends:
      file: docker-opensphere/docker-compose.yml
      service: opensphere
    image: sofwerx/opensphere
    restart: always
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=opensphere"
      - "traefik.port=8282"
      - "traefik.frontend.rule=Host:opensphere.${DNS_DOMAIN};AddPrefix:/opensphere/dist/opensphere"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  neo4j:
    extends:
      file: docker-neo4j/docker-compose.yml
      service: neo4j
    user: root
    image: neo4j:3.3
    restart: always
    networks: 
      - default
    ports:
      - 7687:7687
      - 7474:7474
      - 7473:7473
    volumes:
      - traefik-ssl:/ssl
      - neo4j-data:/var/lib/neo4j
    labels:
      - "traefik.enable=true"
      - "traefik.backend=neo4j"
      - "traefik.port=7474"
      - "traefik.frontend.rule=Host:neo4j.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  structr:
    image: structr/structr:2.3.5
    container_name: structr
    hostname: structr
    restart: always
    networks:
      - default
    ports:
      - 8582:8082
      - 8583:8083
    volumes:
      - traefik-ssl:/ssl
    labels:
      - "traefik.enable=true"
      - "traefik.backend=structr"
      - "traefik.port=8582"
      - "traefik.frontend.rule=Host:structr.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  osh-core:
    extends:
      file: docker-osh/docker-compose.yml
      service: osh-core
    restart: always
    networks:
      - default
    ports:
      - 8181:8181
    labels:
      - "traefik.enable=true"
      - "traefik.backend=osh-core"
      - "traefik.port=8181"
      - "traefik.frontend.rule=Host:osh.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"


#  neo4j-js:
#    extends:
#      file: docker-neo4j/docker-compose.yml
#      service: neo4j-js
#    restart: always
#    ports:
#      - 4200:4200
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=neo4j-js"
#      - "traefik.port=4200"
#      - "traefik.frontend.rule=Host:neo4j-js.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"

  gremlin:
#    extends:
#      file: docker-gremlin/docker-compose.yml
#      service: gremlin
    image: sofwerx/gremlin
    restart: always
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=gremlin"
      - "traefik.port=8182"
      - "traefik.frontend.rule=Host:gremlin.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  owncloud:
    image: owncloud/server:${OWNCLOUD_VERSION}
    restart: always
    container_name: owncloud
    hostname: owncloud
    environment:
      - OWNCLOUD_DOMAIN=owncloud.${DNS_DOMAIN}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=${OWNCLOUD_MYSQL_DATABASE}
      - OWNCLOUD_DB_USERNAME=${OWNCLOUD_MYSQL_USERNAME}
      - OWNCLOUD_DB_PASSWORD=${OWNCLOUD_MYSQL_PASSWORD}
      - OWNCLOUD_DB_HOST=owncloud-mysql
      - OWNCLOUD_ADMIN_USERNAME=${OWNCLOUD_ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${OWNCLOUD_ADMIN_PASSWORD}
      - OWNCLOUD_UTF8MB4_ENABLED=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=owncloud-redis
#    healthcheck:
#      test: "curl -f http://owncloud/status.php"
#      interval: 30s
#      timeout: 10s
#      retries: 5
    volumes:
      - owncloud-data:/mnt/data
    networks:
      - default
    depends_on:
      - owncloud-mysql
      - owncloud-redis
    labels:
      - "traefik.enable=true"
      - "traefik.backend=owncloud"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:owncloud.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  owncloud-mysql:
    image: webhippie/mariadb:latest
    restart: always
    container_name: owncloud-mysql
    hostname: owncloud-mysql
    environment:
      - MARIADB_ROOT_PASSWORD=${OWNCLOUD_MYSQL_ROOT_PASSWORD}
      - MARIADB_USERNAME=${OWNCLOUD_MYSQL_USERNAME}
      - MARIADB_PASSWORD=${OWNCLOUD_MYSQL_PASSWORD}
      - MARIADB_DATABASE=${OWNCLOUD_MYSQL_DATABASE}
      - MARIADB_MAX_ALLOWED_PACKET=128M
      - MARIADB_INNODB_LOG_FILE_SIZE=64M
      - MARIADB_INNODB_LARGE_PREFIX=ON
      - MARIADB_INNODB_FILE_FORMAT=Barracuda
#    healthcheck:
#      test: ["CMD", "/usr/bin/healthcheck"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
    volumes:
      - owncloud-mysql:/var/lib/mysql
      - owncloud-backup:/var/lib/backup
    networks:
      - default
    labels:
      - "traefik.enable=false"

  owncloud-redis:
    image: webhippie/redis:latest
    restart: always
    container_name: owncloud-redis
    hostname: owncloud-redis
    environment:
      - REDIS_DATABASES=1
#    healthcheck:
#      test: ["CMD", "/usr/bin/healthcheck"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
    volumes:
      - owncloud-redis:/var/lib/redis
    networks:
      - default
    labels:
      - "traefik.enable=false"

  cesium:
    extends:
      file: docker-cesium/docker-compose.yml
      service: cesium
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=cesium"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:cesium.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

#  terria:
#    extends:
#      file: docker-terria/docker-compose.yml
#      service: terria
#    restart: always
#    logging: *default-logging
#    networks:
#      - default
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=terria"
#      - "traefik.port=3001"
#      - "traefik.frontend.rule=Host:terria.${DNS_DOMAIN}"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.entryPoints=http,https"

  3dcitydb-postgis:
    extends:
      file: docker-3dcitydb/docker-compose.yml
      service: 3dcitydb-postgis
    restart: always
    logging: *default-logging
    ports:
      - 127.0.0.1:15432:5432
    networks:
      - default
    labels:
      - "traefik.enable=false"

  3dcitydb-wfs:
    extends:
      file: docker-3dcitydb/docker-compose.yml
      service: 3dcitydb-wfs
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=3dcitydb-wfs"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:3dcitydb-wfs.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  3dcitydb-web-map:
    extends:
      file: docker-3dcitydb/docker-compose.yml
      service: 3dcitydb-web-map
    restart: always
    logging: *default-logging
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=3dcitydb-web-map"
      - "traefik.port=8000"
      - "traefik.frontend.rule=Host:3dcitydb.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"

  django-geopackage-server:
    extends:
      file: DjangoGeoPackageServer/docker-compose.yml
      service: django-geopackage-server
    image: sofwerx/django-geopackage-server
    container_name: django-geopackage-server
    hostname: django-geopackage-server
    restart: always
    logging: *default-logging
    volumes:
      - django-geopackage-server_data:/data
    environment:
      SQLITE_DB_PATH: /data/db.sqlite3
      DJANGO_HOSTNAME: django-geopackage-server.${DNS_DOMAIN}
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=django-geopackage-server"
      - "traefik.port=7999"
      - "traefik.frontend.rule=Host:django-geopackage-server.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"


  milsymbol-server:
    extends:
      file: milsymbol-server/docker-compose.yml
      service: milsymbol-server
    image: milsymbol-server
    container_name: milsymbol-server
    hostname: milsymbol-server
    restart: always
    networks:
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.backend=mylsymbol-server"
      - "traefik.port=2525"
      - "traefik.frontend.rule=Host:milsymbol-server.${DNS_DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.entryPoints=http,https"
